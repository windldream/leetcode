/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
var minMalwareSpread = function(graph, initial) {
  const m = graph.length;
  const n = graph[0].length;
  const g = Array(Math.max(m, n))
    .fill(0)
    .map(() => new Set());
  for (let i = 0; i < m; i++) {
    for (let j = 0; j < n; j++) {
      if (i === j) continue;
      if (graph[i][j] === 1) {
        g[i].add(j);
        g[j].add(i);
      }
    }
  }

  console.log(g);
  let min = Infinity;
  let minIndex = -1;
  initial.sort((a, b) => a - b);
  for (let i = 0; i < initial.length; i++) {
    const visited = [];
    dfs(g, initial[i], visited);
    if (visited.length > min) {
      min = visited.length;
      minIndex = initial[i];
    }
  }
  return minIndex;

  function dfs(graph, index, visited) {
    if (index >= graph.length || visited.includes(index)) return;
    visited.push(index);
    if (graph[index] && graph[index].length === 0) return;
    for (const next of graph[index]) {
      dfs(graph, next, visited);
    }
  }
};

console.log(
  minMalwareSpread(
    [
      [1, 0, 0, 0],
      [0, 1, 0, 0],
      [0, 0, 1, 1],
      [0, 0, 1, 1]
    ],
    [3, 1]
  )
);
